{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport asinf from '@stdlib/math-base-special-asinf';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the inverse coversed sine of a single-precision floating-point number (in radians).\n*\n* @param {number} x - input value\n* @returns {number} inverse coversed sine\n*\n* @example\n* var v = acoversinf( 0.0 );\n* // returns ~1.5708\n*\n* @example\n* var v = acoversinf( 3.141592653589793 / 2.0 );\n* // returns ~-0.6075\n*\n* @example\n* var v = acoversinf( 3.141592653589793 / 6.0 );\n* // returns ~0.4966\n*\n* @example\n* var v = acoversinf( NaN );\n* // returns NaN\n*/\nfunction acoversinf( x ) {\n\treturn asinf( float64ToFloat32( 1.0 - float64ToFloat32( x ) ) );\n}\n\n\n// EXPORTS //\n\nexport default acoversinf;\n"],"names":["acoversinf","x","asinf","float64ToFloat32"],"mappings":";;2MAkDA,SAASA,EAAYC,GACpB,OAAOC,EAAOC,EAAkB,EAAMA,EAAkBF,IACzD"}